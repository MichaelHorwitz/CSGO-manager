/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csgomanager;

import java.awt.Color;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.io.File;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

//import net.sourceforge.tess4j.*;
/**
 *
 * @author Michael Horwitz
 */
public class MainMenuScreen extends javax.swing.JFrame {

    /**
     * Creates new form LoginScreen
     */
    AccessConnector db; //connects java to access
    private User user; //The user who is logged in
    private DefaultTableModel dtmUpcomingMatches; //The underlying model for the upcoming matches JTable

    //initialises all the labels, boxes and tabels. Also updates the user's information to be accurate
    public MainMenuScreen(User user) {
        initComponents();
        
        db = new AccessConnector();
        this.user = user;
        this.setLabels();
        this.user = db.setUserPreviousMatches(this.user);
        this.user = db.setUserUpcomingMatches(this.user);
        this.setPreviousMatchesBoxes();
        this.setUpcomingMatchesTable();
        this.setPlayerStatsBoxes();
        this.setPlayer1StatsLabels((User) comboPlayer1.getSelectedItem());
        this.setPlayer2StatsLabels((User) comboPlayer2.getSelectedItem());
        tblUploadMatch.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrpUploadMatch = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        mainMenuPanel = new javax.swing.JPanel();
        lblHeading = new javax.swing.JLabel();
        lblCurrentRank = new javax.swing.JLabel();
        lblHello = new javax.swing.JLabel();
        lblUsername2 = new javax.swing.JLabel();
        lblNextMatch = new javax.swing.JLabel();
        btnHelp = new javax.swing.JButton();
        previousMatchesPanel = new javax.swing.JPanel();
        lblHeading1 = new javax.swing.JLabel();
        btnCopyMatch = new javax.swing.JButton();
        comboPreviousMatches = new javax.swing.JComboBox<>();
        lblPreviousMatchesDate = new javax.swing.JLabel();
        lblPreviousMatchesWinOrLoss = new javax.swing.JLabel();
        lblPreviousMatchesKills = new javax.swing.JLabel();
        lblPreviousMatchesDeaths = new javax.swing.JLabel();
        lblPreviousMatchesAssissts = new javax.swing.JLabel();
        lblPreviousMatchesKDACompare = new javax.swing.JLabel();
        lblMatchDate = new javax.swing.JLabel();
        lblWinLoss = new javax.swing.JLabel();
        lblMatchKills = new javax.swing.JLabel();
        lblMatchDeaths = new javax.swing.JLabel();
        lblMatchAssissts = new javax.swing.JLabel();
        lblMatchCompareKDA = new javax.swing.JLabel();
        upcomingMatchesPanel = new javax.swing.JPanel();
        lblHeading2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUpcomingMatches = new javax.swing.JTable();
        btnAddMatch = new javax.swing.JButton();
        playerStatisticsPanel = new javax.swing.JPanel();
        lblHeading3 = new javax.swing.JLabel();
        comboPlayer1 = new javax.swing.JComboBox<>();
        lblUsername23 = new javax.swing.JLabel();
        lblUsername24 = new javax.swing.JLabel();
        lblUsername25 = new javax.swing.JLabel();
        lblUsername26 = new javax.swing.JLabel();
        lblUsername27 = new javax.swing.JLabel();
        lblPlayer1TotalKills = new javax.swing.JLabel();
        lblUsername35 = new javax.swing.JLabel();
        lblPlayer2TotalKills = new javax.swing.JLabel();
        lblPlayer2AverageKills = new javax.swing.JLabel();
        lblPlayer1AverageKills = new javax.swing.JLabel();
        lblPlayer1TotalDeaths = new javax.swing.JLabel();
        lblPlayer2TotalDeaths = new javax.swing.JLabel();
        lblPlayer1AverageDeaths = new javax.swing.JLabel();
        lblPlayer2AverageDeaths = new javax.swing.JLabel();
        lblPlayer1TotalAssists = new javax.swing.JLabel();
        lblPlayer1AverageAssists = new javax.swing.JLabel();
        comboPlayer2 = new javax.swing.JComboBox<>();
        lblUsername49 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txareaPlayer2Tip = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        txareaPlayer1Tip = new javax.swing.JTextArea();
        lblPlayer2AverageAssists = new javax.swing.JLabel();
        lblPlayer2TotalAssists = new javax.swing.JLabel();
        uploadMatchPanel = new javax.swing.JPanel();
        lblHeading5 = new javax.swing.JLabel();
        btnConfirmUpload = new javax.swing.JButton();
        btnUploadMatch = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblUploadMatch = new javax.swing.JTable();
        rbtnLoss = new javax.swing.JRadioButton();
        rbtnWin = new javax.swing.JRadioButton();
        rbtnDraw = new javax.swing.JRadioButton();
        txfDay = new javax.swing.JTextField();
        txfOpponent = new javax.swing.JTextField();
        txfMnth = new javax.swing.JTextField();
        lblUsername28 = new javax.swing.JLabel();
        lblUsername29 = new javax.swing.JLabel();
        lblUsername30 = new javax.swing.JLabel();
        lblUsername31 = new javax.swing.JLabel();
        lblUsername32 = new javax.swing.JLabel();
        txfYear = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(29, 36, 36));
        setFocusable(false);
        setForeground(new java.awt.Color(29, 36, 36));

        jTabbedPane1.setPreferredSize(new java.awt.Dimension(701, 446));

        mainMenuPanel.setBackground(new java.awt.Color(29, 36, 36));
        mainMenuPanel.setMaximumSize(new java.awt.Dimension(32767, 437));
        mainMenuPanel.setPreferredSize(new java.awt.Dimension(701, 446));

        lblHeading.setBackground(new java.awt.Color(29, 36, 36));
        lblHeading.setFont(new java.awt.Font("Gill Sans MT", 1, 29)); // NOI18N
        lblHeading.setForeground(new java.awt.Color(255, 255, 255));
        lblHeading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHeading.setText("Welcome to the Esports Manager");
        lblHeading.setOpaque(true);

        lblCurrentRank.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblCurrentRank.setForeground(new java.awt.Color(255, 255, 255));
        lblCurrentRank.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCurrentRank.setText("You are currently ranked [rank]");

        lblHello.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblHello.setForeground(new java.awt.Color(255, 255, 255));
        lblHello.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHello.setText("Hi [username]");

        lblUsername2.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblUsername2.setForeground(new java.awt.Color(255, 255, 255));
        lblUsername2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUsername2.setText("If you need any help using the program click the button below");

        lblNextMatch.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblNextMatch.setForeground(new java.awt.Color(255, 255, 255));
        lblNextMatch.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNextMatch.setText("You're next match will take place on [date]");

        btnHelp.setBackground(new java.awt.Color(61, 106, 102));
        btnHelp.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnHelp.setBorderPainted(false);
        btnHelp.setBorder(null);
        btnHelp.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnHelp.setContentAreaFilled(false);
        btnHelp.setIcon(new ImageIcon("btnHelp.png"));
        btnHelp.setRolloverIcon(new ImageIcon("btnHelpHover.png"));
        btnHelp.setPressedIcon(new ImageIcon("btnHelpPressed.png"));
        btnHelp.setDisabledIcon(new ImageIcon("btnHelp.png"));
        btnHelp.setForeground(new java.awt.Color(255, 255, 255));
        btnHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainMenuPanelLayout = new javax.swing.GroupLayout(mainMenuPanel);
        mainMenuPanel.setLayout(mainMenuPanelLayout);
        mainMenuPanelLayout.setHorizontalGroup(
            mainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainMenuPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(222, 222, 222))
            .addGroup(mainMenuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblHeading, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE)
                    .addComponent(lblCurrentRank, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblUsername2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblNextMatch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblHello, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        mainMenuPanelLayout.setVerticalGroup(
            mainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainMenuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblHello)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblCurrentRank)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblNextMatch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblUsername2)
                .addGap(18, 18, 18)
                .addComponent(btnHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(189, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Welcome", mainMenuPanel);

        previousMatchesPanel.setBackground(new java.awt.Color(29, 36, 36));
        previousMatchesPanel.setPreferredSize(new java.awt.Dimension(701, 446));

        lblHeading1.setBackground(new java.awt.Color(29, 36, 36));
        lblHeading1.setFont(new java.awt.Font("Gill Sans MT", 1, 29)); // NOI18N
        lblHeading1.setForeground(new java.awt.Color(255, 255, 255));
        lblHeading1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHeading1.setText("Previous Matches");
        lblHeading.setOpaque(true);

        btnCopyMatch.setBackground(new java.awt.Color(61, 106, 102));
        btnCopyMatch.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnCopyMatch.setBorderPainted(false);
        btnCopyMatch.setBorder(null);
        btnCopyMatch.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnCopyMatch.setContentAreaFilled(false);
        btnCopyMatch.setIcon(new ImageIcon("btnCopyMatch.png"));
        btnCopyMatch.setRolloverIcon(new ImageIcon("btnCopyMatchHover.png"));
        btnCopyMatch.setPressedIcon(new ImageIcon("btnCopyMatchPressed.png"));
        btnCopyMatch.setDisabledIcon(new ImageIcon("btnCopyMatch.png"));
        btnCopyMatch.setForeground(new java.awt.Color(255, 255, 255));
        btnCopyMatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyMatchActionPerformed(evt);
            }
        });

        comboPreviousMatches.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboPreviousMatches.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboPreviousMatchesActionPerformed(evt);
            }
        });

        lblPreviousMatchesDate.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblPreviousMatchesDate.setForeground(new java.awt.Color(255, 255, 255));
        lblPreviousMatchesDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPreviousMatchesDate.setText("Date:");
        lblPreviousMatchesDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblPreviousMatchesWinOrLoss.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblPreviousMatchesWinOrLoss.setForeground(new java.awt.Color(255, 255, 255));
        lblPreviousMatchesWinOrLoss.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPreviousMatchesWinOrLoss.setText("Win or Loss:");
        lblPreviousMatchesWinOrLoss.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblPreviousMatchesKills.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblPreviousMatchesKills.setForeground(new java.awt.Color(255, 255, 255));
        lblPreviousMatchesKills.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPreviousMatchesKills.setText("Your Kills");
        lblPreviousMatchesKills.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblPreviousMatchesDeaths.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblPreviousMatchesDeaths.setForeground(new java.awt.Color(255, 255, 255));
        lblPreviousMatchesDeaths.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPreviousMatchesDeaths.setText("Your Deaths");
        lblPreviousMatchesDeaths.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblPreviousMatchesAssissts.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblPreviousMatchesAssissts.setForeground(new java.awt.Color(255, 255, 255));
        lblPreviousMatchesAssissts.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPreviousMatchesAssissts.setText("Your Assists");
        lblPreviousMatchesAssissts.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblPreviousMatchesKDACompare.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblPreviousMatchesKDACompare.setForeground(new java.awt.Color(255, 255, 255));
        lblPreviousMatchesKDACompare.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPreviousMatchesKDACompare.setText("K/D/A vs Your Average");
        lblPreviousMatchesKDACompare.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblMatchDate.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblMatchDate.setForeground(new java.awt.Color(255, 255, 255));
        lblMatchDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMatchDate.setText("0000/00/00");
        lblMatchDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblWinLoss.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblWinLoss.setForeground(new java.awt.Color(255, 255, 255));
        lblWinLoss.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblWinLoss.setText("ERR");
        lblWinLoss.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblMatchKills.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblMatchKills.setForeground(new java.awt.Color(255, 255, 255));
        lblMatchKills.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMatchKills.setText("0");
        lblMatchKills.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblMatchDeaths.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblMatchDeaths.setForeground(new java.awt.Color(255, 255, 255));
        lblMatchDeaths.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMatchDeaths.setText("0");
        lblMatchDeaths.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblMatchAssissts.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblMatchAssissts.setForeground(new java.awt.Color(255, 255, 255));
        lblMatchAssissts.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMatchAssissts.setText("0");
        lblMatchAssissts.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblMatchCompareKDA.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblMatchCompareKDA.setForeground(new java.awt.Color(255, 255, 255));
        lblMatchCompareKDA.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMatchCompareKDA.setText("ERR");
        lblMatchCompareKDA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        javax.swing.GroupLayout previousMatchesPanelLayout = new javax.swing.GroupLayout(previousMatchesPanel);
        previousMatchesPanel.setLayout(previousMatchesPanelLayout);
        previousMatchesPanelLayout.setHorizontalGroup(
            previousMatchesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(previousMatchesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(previousMatchesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblHeading1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(previousMatchesPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(previousMatchesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(comboPreviousMatches, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(previousMatchesPanelLayout.createSequentialGroup()
                                .addGroup(previousMatchesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblPreviousMatchesWinOrLoss, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblPreviousMatchesKills, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblPreviousMatchesDeaths, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblPreviousMatchesAssissts, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblPreviousMatchesKDACompare, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                                    .addComponent(lblPreviousMatchesDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(previousMatchesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(lblMatchAssissts, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblMatchDeaths, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblWinLoss, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblMatchDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblMatchCompareKDA, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                                    .addComponent(lblMatchKills, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 12, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(previousMatchesPanelLayout.createSequentialGroup()
                .addGap(227, 227, 227)
                .addComponent(btnCopyMatch, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        previousMatchesPanelLayout.setVerticalGroup(
            previousMatchesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(previousMatchesPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lblHeading1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(comboPreviousMatches, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(previousMatchesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(previousMatchesPanelLayout.createSequentialGroup()
                        .addComponent(lblPreviousMatchesDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPreviousMatchesWinOrLoss)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPreviousMatchesKills)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPreviousMatchesDeaths)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPreviousMatchesAssissts)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPreviousMatchesKDACompare))
                    .addGroup(previousMatchesPanelLayout.createSequentialGroup()
                        .addComponent(lblMatchDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblWinLoss)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblMatchKills)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblMatchDeaths)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblMatchAssissts)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblMatchCompareKDA)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCopyMatch, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(86, 86, 86))
        );

        jTabbedPane1.addTab("Previous Matches", previousMatchesPanel);

        upcomingMatchesPanel.setBackground(new java.awt.Color(29, 36, 36));
        upcomingMatchesPanel.setPreferredSize(new java.awt.Dimension(701, 446));

        lblHeading2.setBackground(new java.awt.Color(29, 36, 36));
        lblHeading2.setFont(new java.awt.Font("Gill Sans MT", 1, 29)); // NOI18N
        lblHeading2.setForeground(new java.awt.Color(255, 255, 255));
        lblHeading2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHeading2.setText("Upcoming Matches");
        lblHeading.setOpaque(true);

        tblUpcomingMatches.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Opponent", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblUpcomingMatches.setRowHeight(34);
        jScrollPane1.setViewportView(tblUpcomingMatches);

        btnAddMatch.setBackground(new java.awt.Color(61, 106, 102));
        btnAddMatch.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnAddMatch.setBorderPainted(false);
        btnAddMatch.setBorder(null);
        btnAddMatch.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnAddMatch.setContentAreaFilled(false);
        btnAddMatch.setIcon(new ImageIcon("btnAddMatch.png"));
        btnAddMatch.setRolloverIcon(new ImageIcon("btnAddMatchHover.png"));
        btnAddMatch.setPressedIcon(new ImageIcon("btnAddMatchPressed.png"));
        btnAddMatch.setDisabledIcon(new ImageIcon("btnAddMatchDisabled.png"));
        btnAddMatch.setForeground(new java.awt.Color(255, 255, 255));
        btnAddMatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMatchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout upcomingMatchesPanelLayout = new javax.swing.GroupLayout(upcomingMatchesPanel);
        upcomingMatchesPanel.setLayout(upcomingMatchesPanelLayout);
        upcomingMatchesPanelLayout.setHorizontalGroup(
            upcomingMatchesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(upcomingMatchesPanelLayout.createSequentialGroup()
                .addGroup(upcomingMatchesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(upcomingMatchesPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblHeading2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(upcomingMatchesPanelLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 609, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
            .addGroup(upcomingMatchesPanelLayout.createSequentialGroup()
                .addGap(223, 223, 223)
                .addComponent(btnAddMatch, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        upcomingMatchesPanelLayout.setVerticalGroup(
            upcomingMatchesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(upcomingMatchesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHeading2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddMatch, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(126, 126, 126))
        );

        jTabbedPane1.addTab("Upcoming Matches", upcomingMatchesPanel);

        playerStatisticsPanel.setBackground(new java.awt.Color(29, 36, 36));
        playerStatisticsPanel.setPreferredSize(new java.awt.Dimension(701, 446));

        lblHeading3.setBackground(new java.awt.Color(29, 36, 36));
        lblHeading3.setFont(new java.awt.Font("Gill Sans MT", 1, 29)); // NOI18N
        lblHeading3.setForeground(new java.awt.Color(255, 255, 255));
        lblHeading3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHeading3.setText("Player Statistics");
        lblHeading.setOpaque(true);

        comboPlayer1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboPlayer1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboPlayer1ActionPerformed(evt);
            }
        });

        lblUsername23.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblUsername23.setForeground(new java.awt.Color(255, 255, 255));
        lblUsername23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUsername23.setText("Total Kills");
        lblUsername23.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblUsername24.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblUsername24.setForeground(new java.awt.Color(255, 255, 255));
        lblUsername24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUsername24.setText("Avg Kills");
        lblUsername24.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblUsername25.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblUsername25.setForeground(new java.awt.Color(255, 255, 255));
        lblUsername25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUsername25.setText("Total Deaths");
        lblUsername25.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblUsername26.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblUsername26.setForeground(new java.awt.Color(255, 255, 255));
        lblUsername26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUsername26.setText("Avg Deaths");
        lblUsername26.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblUsername27.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblUsername27.setForeground(new java.awt.Color(255, 255, 255));
        lblUsername27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUsername27.setText("Total Assists");
        lblUsername27.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblPlayer1TotalKills.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblPlayer1TotalKills.setForeground(new java.awt.Color(255, 255, 255));
        lblPlayer1TotalKills.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPlayer1TotalKills.setText("0");
        lblPlayer1TotalKills.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblUsername35.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblUsername35.setForeground(new java.awt.Color(255, 255, 255));
        lblUsername35.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUsername35.setText("Avg Assists");
        lblUsername35.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblPlayer2TotalKills.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblPlayer2TotalKills.setForeground(new java.awt.Color(255, 255, 255));
        lblPlayer2TotalKills.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPlayer2TotalKills.setText("0");
        lblPlayer2TotalKills.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblPlayer2AverageKills.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblPlayer2AverageKills.setForeground(new java.awt.Color(255, 255, 255));
        lblPlayer2AverageKills.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPlayer2AverageKills.setText("0");
        lblPlayer2AverageKills.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblPlayer1AverageKills.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblPlayer1AverageKills.setForeground(new java.awt.Color(255, 255, 255));
        lblPlayer1AverageKills.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPlayer1AverageKills.setText("0");
        lblPlayer1AverageKills.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblPlayer1TotalDeaths.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblPlayer1TotalDeaths.setForeground(new java.awt.Color(255, 255, 255));
        lblPlayer1TotalDeaths.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPlayer1TotalDeaths.setText("0");
        lblPlayer1TotalDeaths.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblPlayer2TotalDeaths.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblPlayer2TotalDeaths.setForeground(new java.awt.Color(255, 255, 255));
        lblPlayer2TotalDeaths.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPlayer2TotalDeaths.setText("0");
        lblPlayer2TotalDeaths.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblPlayer1AverageDeaths.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblPlayer1AverageDeaths.setForeground(new java.awt.Color(255, 255, 255));
        lblPlayer1AverageDeaths.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPlayer1AverageDeaths.setText("0");
        lblPlayer1AverageDeaths.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblPlayer2AverageDeaths.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblPlayer2AverageDeaths.setForeground(new java.awt.Color(255, 255, 255));
        lblPlayer2AverageDeaths.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPlayer2AverageDeaths.setText("0");
        lblPlayer2AverageDeaths.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblPlayer1TotalAssists.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblPlayer1TotalAssists.setForeground(new java.awt.Color(255, 255, 255));
        lblPlayer1TotalAssists.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPlayer1TotalAssists.setText("0");
        lblPlayer1TotalAssists.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblPlayer1AverageAssists.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblPlayer1AverageAssists.setForeground(new java.awt.Color(255, 255, 255));
        lblPlayer1AverageAssists.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPlayer1AverageAssists.setText("0");
        lblPlayer1AverageAssists.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        comboPlayer2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboPlayer2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboPlayer2ActionPerformed(evt);
            }
        });

        lblUsername49.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblUsername49.setForeground(new java.awt.Color(255, 255, 255));
        lblUsername49.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUsername49.setText("Tips");
        lblUsername49.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        txareaPlayer2Tip.setBackground(new java.awt.Color(29, 36, 36));
        txareaPlayer2Tip.setColumns(20);
        txareaPlayer2Tip.setFont(new java.awt.Font("Gill Sans MT", 0, 18)); // NOI18N
        txareaPlayer2Tip.setForeground(new java.awt.Color(255, 255, 255));
        txareaPlayer2Tip.setRows(3);
        txareaPlayer2Tip.setText("Error\n");
        txareaPlayer2Tip.setMaximumSize(new java.awt.Dimension(257, 72));
        txareaPlayer2Tip.setMinimumSize(new java.awt.Dimension(257, 72));
        jScrollPane2.setViewportView(txareaPlayer2Tip);

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        txareaPlayer1Tip.setBackground(new java.awt.Color(29, 36, 36));
        txareaPlayer1Tip.setColumns(20);
        txareaPlayer1Tip.setFont(new java.awt.Font("Gill Sans MT", 0, 18)); // NOI18N
        txareaPlayer1Tip.setForeground(new java.awt.Color(255, 255, 255));
        txareaPlayer1Tip.setRows(3);
        txareaPlayer1Tip.setText("Error\n");
        txareaPlayer1Tip.setMaximumSize(new java.awt.Dimension(257, 72));
        txareaPlayer1Tip.setMinimumSize(new java.awt.Dimension(257, 72));
        jScrollPane3.setViewportView(txareaPlayer1Tip);

        lblPlayer2AverageAssists.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblPlayer2AverageAssists.setForeground(new java.awt.Color(255, 255, 255));
        lblPlayer2AverageAssists.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPlayer2AverageAssists.setText("0");
        lblPlayer2AverageAssists.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblPlayer2TotalAssists.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblPlayer2TotalAssists.setForeground(new java.awt.Color(255, 255, 255));
        lblPlayer2TotalAssists.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPlayer2TotalAssists.setText("0");
        lblPlayer2TotalAssists.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        javax.swing.GroupLayout playerStatisticsPanelLayout = new javax.swing.GroupLayout(playerStatisticsPanel);
        playerStatisticsPanel.setLayout(playerStatisticsPanelLayout);
        playerStatisticsPanelLayout.setHorizontalGroup(
            playerStatisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerStatisticsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(playerStatisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblHeading3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(playerStatisticsPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(playerStatisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblUsername27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblUsername26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblUsername25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblUsername23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblUsername24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblUsername35, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblUsername49, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(playerStatisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(playerStatisticsPanelLayout.createSequentialGroup()
                                .addComponent(lblPlayer1TotalAssists, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblPlayer2TotalAssists, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(playerStatisticsPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addGroup(playerStatisticsPanelLayout.createSequentialGroup()
                                .addComponent(lblPlayer1AverageAssists, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblPlayer2AverageAssists, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(playerStatisticsPanelLayout.createSequentialGroup()
                                .addComponent(comboPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboPlayer2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(playerStatisticsPanelLayout.createSequentialGroup()
                                .addGroup(playerStatisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(playerStatisticsPanelLayout.createSequentialGroup()
                                        .addComponent(lblPlayer1AverageDeaths, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblPlayer2AverageDeaths, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(playerStatisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(playerStatisticsPanelLayout.createSequentialGroup()
                                            .addComponent(lblPlayer1AverageKills, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lblPlayer2AverageKills, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, playerStatisticsPanelLayout.createSequentialGroup()
                                            .addComponent(lblPlayer1TotalDeaths, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lblPlayer2TotalDeaths, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(playerStatisticsPanelLayout.createSequentialGroup()
                                        .addComponent(lblPlayer1TotalKills, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblPlayer2TotalKills, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        playerStatisticsPanelLayout.setVerticalGroup(
            playerStatisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerStatisticsPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lblHeading3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(playerStatisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboPlayer2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playerStatisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsername23)
                    .addComponent(lblPlayer1TotalKills)
                    .addComponent(lblPlayer2TotalKills))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playerStatisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsername24)
                    .addComponent(lblPlayer1AverageKills)
                    .addComponent(lblPlayer2AverageKills))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playerStatisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsername25)
                    .addComponent(lblPlayer1TotalDeaths)
                    .addComponent(lblPlayer2TotalDeaths))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playerStatisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsername26)
                    .addComponent(lblPlayer1AverageDeaths)
                    .addComponent(lblPlayer2AverageDeaths))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playerStatisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsername27)
                    .addComponent(lblPlayer1TotalAssists)
                    .addComponent(lblPlayer2TotalAssists))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playerStatisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsername35)
                    .addComponent(lblPlayer1AverageAssists)
                    .addComponent(lblPlayer2AverageAssists))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playerStatisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblUsername49, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2))
                .addGap(102, 102, 102))
        );

        jTabbedPane1.addTab("Player Statistics", playerStatisticsPanel);

        uploadMatchPanel.setBackground(new java.awt.Color(29, 36, 36));
        uploadMatchPanel.setPreferredSize(new java.awt.Dimension(701, 446));
        uploadMatchPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblHeading5.setBackground(new java.awt.Color(29, 36, 36));
        lblHeading5.setFont(new java.awt.Font("Gill Sans MT", 1, 29)); // NOI18N
        lblHeading5.setForeground(new java.awt.Color(255, 255, 255));
        lblHeading5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHeading5.setText("Upload Match Screen");
        lblHeading.setOpaque(true);
        uploadMatchPanel.add(lblHeading5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 676, -1));

        btnConfirmUpload.setBackground(new java.awt.Color(61, 106, 102));
        btnConfirmUpload.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnConfirmUpload.setBorderPainted(false);
        btnConfirmUpload.setBorder(null);
        btnConfirmUpload.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnConfirmUpload.setContentAreaFilled(false);
        btnConfirmUpload.setIcon(new ImageIcon("btnConfirmUpload.png"));
        btnConfirmUpload.setRolloverIcon(new ImageIcon("btnConfirmUploadHover.png"));
        btnConfirmUpload.setPressedIcon(new ImageIcon("btnConfirmUploadPressed.png"));
        btnConfirmUpload.setDisabledIcon(new ImageIcon("btnConfirmUploadDisabled.png"));
        btnConfirmUpload.setForeground(new java.awt.Color(255, 255, 255));
        btnConfirmUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmUploadActionPerformed(evt);
            }
        });
        uploadMatchPanel.add(btnConfirmUpload, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 350, 240, 49));

        btnUploadMatch.setBackground(new java.awt.Color(61, 106, 102));
        btnUploadMatch.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnUploadMatch.setBorderPainted(false);
        btnUploadMatch.setBorder(null);
        btnUploadMatch.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnUploadMatch.setContentAreaFilled(false);
        btnUploadMatch.setIcon(new ImageIcon("btnUploadMatch.png"));
        btnUploadMatch.setRolloverIcon(new ImageIcon("btnUploadMatchHover.png"));
        btnUploadMatch.setPressedIcon(new ImageIcon("btnUploadMatchPressed.png"));
        btnUploadMatch.setDisabledIcon(new ImageIcon("btnUploadMatchDisabled.png"));
        btnUploadMatch.setForeground(new java.awt.Color(255, 255, 255));
        btnUploadMatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadMatchActionPerformed(evt);
            }
        });
        uploadMatchPanel.add(btnUploadMatch, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 350, 240, 49));

        tblUploadMatch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Username", "Player Kills", "Player Deaths", "PlayerAssists"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblUploadMatch.setRowHeight(44);
        tblUploadMatch.setRowSelectionAllowed(false);
        jScrollPane4.setViewportView(tblUploadMatch);

        uploadMatchPanel.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 680, 240));

        btnGrpUploadMatch.add(rbtnLoss);
        rbtnLoss.setForeground(new java.awt.Color(255, 255, 255));
        rbtnLoss.setText("Loss");
        uploadMatchPanel.add(rbtnLoss, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 310, 70, -1));

        btnGrpUploadMatch.add(rbtnWin);
        rbtnWin.setForeground(new java.awt.Color(255, 255, 255));
        rbtnWin.setText("Win");
        uploadMatchPanel.add(rbtnWin, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, 60, -1));

        btnGrpUploadMatch.add(rbtnDraw);
        rbtnDraw.setForeground(new java.awt.Color(255, 255, 255));
        rbtnDraw.setText("Draw");
        uploadMatchPanel.add(rbtnDraw, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 310, 70, -1));

        txfDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfDayActionPerformed(evt);
            }
        });
        uploadMatchPanel.add(txfDay, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 380, 80, -1));

        txfOpponent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfOpponentActionPerformed(evt);
            }
        });
        uploadMatchPanel.add(txfOpponent, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 310, 240, 30));

        txfMnth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfMnthActionPerformed(evt);
            }
        });
        uploadMatchPanel.add(txfMnth, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 350, 80, -1));

        lblUsername28.setFont(new java.awt.Font("Gill Sans MT", 0, 20)); // NOI18N
        lblUsername28.setForeground(new java.awt.Color(255, 255, 255));
        lblUsername28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUsername28.setText("Day");
        uploadMatchPanel.add(lblUsername28, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 380, 80, 20));

        lblUsername29.setFont(new java.awt.Font("Gill Sans MT", 0, 26)); // NOI18N
        lblUsername29.setForeground(new java.awt.Color(255, 255, 255));
        lblUsername29.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUsername29.setText("Date:");
        uploadMatchPanel.add(lblUsername29, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 290, -1, -1));

        lblUsername30.setFont(new java.awt.Font("Gill Sans MT", 0, 20)); // NOI18N
        lblUsername30.setForeground(new java.awt.Color(255, 255, 255));
        lblUsername30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUsername30.setText("Opponent:");
        uploadMatchPanel.add(lblUsername30, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 290, 240, 20));

        lblUsername31.setFont(new java.awt.Font("Gill Sans MT", 0, 20)); // NOI18N
        lblUsername31.setForeground(new java.awt.Color(255, 255, 255));
        lblUsername31.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUsername31.setText("Month");
        uploadMatchPanel.add(lblUsername31, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 350, 80, 20));

        lblUsername32.setFont(new java.awt.Font("Gill Sans MT", 0, 20)); // NOI18N
        lblUsername32.setForeground(new java.awt.Color(255, 255, 255));
        lblUsername32.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUsername32.setText("Year");
        uploadMatchPanel.add(lblUsername32, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 320, 80, 20));

        txfYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfYearActionPerformed(evt);
            }
        });
        uploadMatchPanel.add(txfYear, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 320, 80, -1));

        jTabbedPane1.addTab("Upload Match", uploadMatchPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //opens the help screen when the help button is pressed
    private void btnHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpActionPerformed
        HelpScreen hs = new HelpScreen();
        hs.setVisible(true);

    }//GEN-LAST:event_btnHelpActionPerformed
    
    //Sets the first set of labels on the Player Statistics screen to match the 
    //information of the user
    //user whose details are being read
   
    private void setPlayer1StatsLabels(User user) {

        String username = comboPlayer2.getSelectedItem().toString();
        User otherUser = db.getUser(username);
        if (otherUser == null) {
            otherUser = user;
        }
        user = db.setUserPreviousMatches(user);
        otherUser = db.setUserPreviousMatches(otherUser);

        lblPlayer1TotalKills.setText(user.getTotalKills() + "");
        if (user.getTotalKills() > otherUser.getTotalKills()) {
            lblPlayer1TotalKills.setForeground(Color.green);
            lblPlayer2TotalKills.setForeground(Color.red);
        } else if (user.getTotalKills() < otherUser.getTotalKills()) {
            lblPlayer1TotalKills.setForeground(Color.red);
            lblPlayer2TotalKills.setForeground(Color.green);
        } else {
            lblPlayer1TotalKills.setForeground(Color.white);
            lblPlayer2TotalKills.setForeground(Color.white);
        }

        lblPlayer1TotalDeaths.setText(user.getTotalDeaths() + "");
        if (user.getTotalDeaths() > otherUser.getTotalDeaths()) {
            lblPlayer1TotalDeaths.setForeground(Color.green);
            lblPlayer2TotalDeaths.setForeground(Color.red);
        } else if (user.getTotalDeaths() < otherUser.getTotalDeaths()) {
            lblPlayer1TotalDeaths.setForeground(Color.red);
            lblPlayer2TotalDeaths.setForeground(Color.green);
        } else {
            lblPlayer1TotalDeaths.setForeground(Color.white);
            lblPlayer2TotalDeaths.setForeground(Color.white);
        }

        lblPlayer1TotalAssists.setText(user.getTotalAssists() + "");
        if (user.getTotalAssists() > otherUser.getTotalAssists()) {
            lblPlayer1TotalAssists.setForeground(Color.green);
            lblPlayer2TotalAssists.setForeground(Color.red);
        } else if (user.getTotalAssists() < otherUser.getTotalAssists()) {
            lblPlayer1TotalAssists.setForeground(Color.red);
            lblPlayer2TotalAssists.setForeground(Color.green);
        } else {
            lblPlayer1TotalAssists.setForeground(Color.white);
            lblPlayer2TotalAssists.setForeground(Color.white);
        }

        lblPlayer1AverageKills.setText(user.getAverageKills() + "");
        if (user.getAverageKills() > otherUser.getAverageKills()) {
            lblPlayer1AverageKills.setForeground(Color.green);
            lblPlayer2AverageKills.setForeground(Color.red);
        } else if (user.getAverageKills() < otherUser.getAverageKills()) {
            lblPlayer1AverageKills.setForeground(Color.red);
            lblPlayer2AverageKills.setForeground(Color.green);
        } else {
            lblPlayer1AverageKills.setForeground(Color.white);
            lblPlayer2AverageKills.setForeground(Color.white);
        }

        lblPlayer1AverageDeaths.setText(user.getAverageDeaths() + "");
        if (user.getAverageDeaths() > otherUser.getAverageDeaths()) {
            lblPlayer1AverageDeaths.setForeground(Color.green);
            lblPlayer2AverageDeaths.setForeground(Color.red);
        } else if (user.getAverageDeaths() < otherUser.getAverageDeaths()) {
            lblPlayer1AverageDeaths.setForeground(Color.red);
            lblPlayer2AverageDeaths.setForeground(Color.green);
        } else {
            lblPlayer1AverageDeaths.setForeground(Color.white);
            lblPlayer2AverageDeaths.setForeground(Color.white);
        }

        lblPlayer1AverageAssists.setText(user.getAverageAssists() + "");
        if (user.getAverageAssists() > otherUser.getAverageAssists()) {
            lblPlayer1AverageAssists.setForeground(Color.green);
            lblPlayer2AverageAssists.setForeground(Color.red);
        } else if (user.getAverageAssists() < otherUser.getAverageAssists()) {
            lblPlayer1AverageAssists.setForeground(Color.red);
            lblPlayer2AverageAssists.setForeground(Color.green);
        } else {
            lblPlayer1AverageAssists.setForeground(Color.white);
            lblPlayer2AverageAssists.setForeground(Color.white);
        }
        txareaPlayer1Tip.setText(user.getTip());
    }
    
    //Sets the second set of labels on the Player Statistics screen to match the 
    //information of the user
    //user whose details are being read
    private void setPlayer2StatsLabels(User user) {

        String username = comboPlayer1.getSelectedItem().toString();
        User otherUser = db.getUser(username);
        if (otherUser == null) {
            otherUser = user;
        }
        user = db.setUserPreviousMatches(user);
        otherUser = db.setUserPreviousMatches(otherUser);

        lblPlayer2TotalKills.setText(user.getTotalKills() + "");
        if (user.getTotalKills() > otherUser.getTotalKills()) {
            lblPlayer2TotalKills.setForeground(Color.green);
            lblPlayer1TotalKills.setForeground(Color.red);
        } else if (user.getTotalKills() < otherUser.getTotalKills()) {
            lblPlayer2TotalKills.setForeground(Color.red);
            lblPlayer1TotalKills.setForeground(Color.green);
        } else {
            lblPlayer2TotalKills.setForeground(Color.white);
            lblPlayer1TotalKills.setForeground(Color.white);
        }

        lblPlayer2TotalDeaths.setText(user.getTotalDeaths() + "");
        if (user.getTotalDeaths() > otherUser.getTotalDeaths()) {
            lblPlayer2TotalDeaths.setForeground(Color.green);
            lblPlayer1TotalDeaths.setForeground(Color.red);
        } else if (user.getTotalDeaths() < otherUser.getTotalDeaths()) {
            lblPlayer2TotalDeaths.setForeground(Color.red);
            lblPlayer1TotalDeaths.setForeground(Color.green);
        } else {
            lblPlayer2TotalDeaths.setForeground(Color.white);
            lblPlayer1TotalDeaths.setForeground(Color.white);
        }

        lblPlayer2TotalAssists.setText(user.getTotalAssists() + "");
        if (user.getTotalAssists() > otherUser.getTotalAssists()) {
            lblPlayer2TotalAssists.setForeground(Color.green);
            lblPlayer1TotalAssists.setForeground(Color.red);
        } else if (user.getTotalAssists() < otherUser.getTotalAssists()) {
            lblPlayer2TotalAssists.setForeground(Color.red);
            lblPlayer1TotalAssists.setForeground(Color.green);
        } else {
            lblPlayer2TotalAssists.setForeground(Color.white);
            lblPlayer1TotalAssists.setForeground(Color.white);
        }
                lblPlayer2AverageKills.setText(user.getAverageKills() + "");
        if (user.getAverageKills() > otherUser.getAverageKills()) {
            lblPlayer2AverageKills.setForeground(Color.green);
            lblPlayer1AverageKills.setForeground(Color.red);
        } else if (user.getAverageKills() < otherUser.getAverageKills()) {
            lblPlayer2AverageKills.setForeground(Color.red);
            lblPlayer1AverageKills.setForeground(Color.green);
        } else {
            lblPlayer2AverageKills.setForeground(Color.white);
            lblPlayer1AverageKills.setForeground(Color.white);
        }

        lblPlayer2AverageDeaths.setText(user.getAverageDeaths() + "");
        if (user.getAverageDeaths() > otherUser.getAverageDeaths()) {
            lblPlayer2AverageDeaths.setForeground(Color.green);
            lblPlayer1AverageDeaths.setForeground(Color.red);
        } else if (user.getAverageDeaths() < otherUser.getAverageDeaths()) {
            lblPlayer2AverageDeaths.setForeground(Color.red);
            lblPlayer1AverageDeaths.setForeground(Color.green);
        } else {
            lblPlayer2AverageDeaths.setForeground(Color.white);
            lblPlayer1AverageDeaths.setForeground(Color.white);
        }

        lblPlayer2AverageAssists.setText(user.getAverageAssists() + "");
        if (user.getAverageAssists() > otherUser.getAverageAssists()) {
            lblPlayer2AverageAssists.setForeground(Color.green);
            lblPlayer1AverageAssists.setForeground(Color.red);
        } else if (user.getAverageAssists() < otherUser.getAverageAssists()) {
            lblPlayer2AverageAssists.setForeground(Color.red);
            lblPlayer1AverageAssists.setForeground(Color.green);
        } else {
            lblPlayer2AverageAssists.setForeground(Color.white);
            lblPlayer1AverageAssists.setForeground(Color.white);
        }
        txareaPlayer2Tip.setText(user.getTip());

    }
    
    //Fills in information in the upcoming matches table
    private void setUpcomingMatchesTable() {

        dtmUpcomingMatches = (DefaultTableModel) tblUpcomingMatches.getModel();

        for (UpcomingMatch curr : user.getUpcomingMatches()) {
            dtmUpcomingMatches.addRow(new Object[]{curr.getOpponent(), curr.getDate()});
        }
        tblUpcomingMatches.setModel(dtmUpcomingMatches);
        dtmUpcomingMatches.fireTableDataChanged();

    }
    
    //Fills in the previous matches to the match selector
    private void setPreviousMatchesBoxes() {
        JComboBox temp = comboPreviousMatches;
        temp.removeAllItems();
        ArrayList<UserMatch> matches = user.getPreviousMatches();
        for (int i = 0; i < matches.size(); i++) {
            temp.addItem(matches.get(i));
        }
        comboPreviousMatches = temp;
    }
    
    //Adds all the users to the selectors on the player statistics screen
    private void setPlayerStatsBoxes() {
        ArrayList<User> userArr = db.getUserArr();
        JComboBox temp = comboPlayer1;
        temp.removeAllItems();
        for (int i = 0; i < userArr.size(); i++) {
            temp.addItem(userArr.get(i));
            if (userArr.get(i).getUserID() == user.getUserID()) {
                temp.setSelectedItem(userArr.get(i));
            }
        }

        comboPlayer1 = temp;

        temp = comboPlayer2;
        temp.removeAllItems();
        for (int i = 0; i < userArr.size(); i++) {
            temp.addItem(userArr.get(i));
            if (userArr.get(i).getUserID() == user.getUserID()) {
                temp.setSelectedItem(userArr.get(i));
            }
        }

        comboPlayer2 = temp;
    }

    //Fills in the info on the welcome screen
    private void setLabels() {
        lblHello.setText("Hi there " + user.getUsername() + "!");
        lblCurrentRank.setText("Your current rank is " + user.getRanking());

        try {
            lblNextMatch.setText("Your next match is " + db.getUserUpcomingMatchString(user));
        } catch (Exception e) {
            lblNextMatch.setText("No upcoming matches found");
        }
    }

    //Copies the information in the labels to the clipboard
    private void btnCopyMatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyMatchActionPerformed
        UserMatch um = (UserMatch) (comboPreviousMatches.getSelectedItem());
        String onClipboard = "";
        try {
            onClipboard = um.fullString(user);
            Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(onClipboard), null);
            JOptionPane.showMessageDialog(null, "Copied!");
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Match not selected");
        }
  
        
    }//GEN-LAST:event_btnCopyMatchActionPerformed
    
    //Adds the upcomingMatch to the database, selector and user object
    public void addUpcomingMatch(String opponent, String date) {
        db.addUpcomingMatch(user, opponent, date);
        dtmUpcomingMatches.addRow(new Object[]{opponent, date});
        user.addMatch(opponent, date);

    }

    //Brings up the the add match screen with the add match button is pressed
    private void btnAddMatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMatchActionPerformed
        UpcomingMatchAdder upcomingMatchAdder = new UpcomingMatchAdder(this);
        upcomingMatchAdder.setVisible(true);

    }//GEN-LAST:event_btnAddMatchActionPerformed

    //Updaets the labels of the previous match screen when a new match is selected
    private void comboPreviousMatchesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboPreviousMatchesActionPerformed
        UserMatch curr = (UserMatch) comboPreviousMatches.getSelectedItem();
        if (curr != null) {
            lblMatchDate.setText(curr.getMatchDate().toString());
            lblWinLoss.setText(curr.getResult());
            lblMatchKills.setText("" + curr.getPlayerKills());
            lblMatchDeaths.setText("" + curr.getPlayerDeaths());
            lblMatchAssissts.setText("" + curr.getPlayerAssists());
            lblMatchCompareKDA.setText(curr.compareToAverage(user));
        }

    }//GEN-LAST:event_comboPreviousMatchesActionPerformed

    //Updates the labels on the statistics screen when a new user is selected
    private void comboPlayer1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboPlayer1ActionPerformed
        User curr = (User) comboPlayer1.getSelectedItem();

        if (curr != null) {
            this.setPlayer1StatsLabels(curr);        
        }

    }//GEN-LAST:event_comboPlayer1ActionPerformed
    
    //Updates the labels on the statistics screen when a new user is selected
    private void comboPlayer2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboPlayer2ActionPerformed
        User curr = (User) comboPlayer2.getSelectedItem();

        if (curr != null) {
            this.setPlayer2StatsLabels(curr);
        }

    }//GEN-LAST:event_comboPlayer2ActionPerformed

    //Allows the user to choose a file when the upload match button is pressed
    private void btnUploadMatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadMatchActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.showOpenDialog(fc);

        File image = fc.getSelectedFile();
        System.out.println("Image recieved");
        String[][] table = db.processImage(image);
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 4; j++) {
                tblUploadMatch.getModel().setValueAt(table[i][j], i, j);
            }
        }
        JOptionPane.showMessageDialog(null, "OCR done. Please edit the results to be more accurate");

    }//GEN-LAST:event_btnUploadMatchActionPerformed

    //Adds the information from the match table to the databse when the confirm upload button is pressed    
    private void btnConfirmUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmUploadActionPerformed
        String[][] tblContents = new String[5][4];
        if (!rbtnDraw.isSelected() && !rbtnWin.isSelected() && !rbtnLoss.isSelected()) {
            JOptionPane.showMessageDialog(null, "Please select a result");
            return;
        }
        LocalDate date;
        Pattern pattern = Pattern.compile("[0-9][0-9]");
        Matcher dayMatcher = pattern.matcher(txfDay.getText());
        Matcher monthMatcher = pattern.matcher(txfMnth.getText());
        pattern = Pattern.compile("[0-9][0-9][0-9][0-9]");
        Matcher yearMatcher = pattern.matcher(txfYear.getText());

        if (!dayMatcher.find() || !monthMatcher.find() || !yearMatcher.find()) {
            JOptionPane.showMessageDialog(null, "Date is in the wrong format");
            return;
        }
        try {
            date = LocalDate.parse(txfYear.getText() + txfMnth.getText() + txfDay.getText(), DateTimeFormatter.ofPattern("yyyyMMdd"));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Invalid Date");
            return;
        }
        if (txfOpponent.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter a valid opponent");
            return;
        }

        for (int i = 0; i < 5; i++) {

            for (int j = 0; j < 4; j++) {
                String curr = "" + tblUploadMatch.getModel().getValueAt(i, j);

                if (curr.equals("") || curr == null) {
                    JOptionPane.showMessageDialog(null, "Table incomplete. Missing value at ( " + (i + 1) + " ; " + (j + 1) + " )");
                    return;
                }
                if (j == 0) {
                    //try {
                    if (db.getUser(curr) == null) {

                        //db.getUser(curr);
                        //} catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Could not find user with username: " + curr);
                        return;
                    }
                }
                if (j >= 1) {

                    try {
                        Integer.parseInt(curr);
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Error found in inputted numbers. " + curr + " is not valid");
                        return;
                    }
                }

                tblContents[i][j] = curr;

            }
        }
        String result = "";
        if (rbtnDraw.isSelected()) {
            result = "Draw";
        } else if (rbtnWin.isSelected()) {
            result = "Win";
        } else if (rbtnLoss.isSelected()) {
            result = "Loss";
        }

        db.addUserMatch(tblContents, result, date, txfOpponent.getText());
        JOptionPane.showMessageDialog(null, "Match Added!");
        db.setUserPreviousMatches(user);
        setPreviousMatchesBoxes();

    }//GEN-LAST:event_btnConfirmUploadActionPerformed

    private void txfDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfDayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfDayActionPerformed

    private void txfOpponentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfOpponentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfOpponentActionPerformed

    private void txfMnthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfMnthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfMnthActionPerformed

    private void txfYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfYearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMenuScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMenuScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMenuScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenuScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenuScreen(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddMatch;
    private javax.swing.JButton btnConfirmUpload;
    private javax.swing.JButton btnCopyMatch;
    private javax.swing.ButtonGroup btnGrpUploadMatch;
    private javax.swing.JButton btnHelp;
    private javax.swing.JButton btnUploadMatch;
    private javax.swing.JComboBox<String> comboPlayer1;
    private javax.swing.JComboBox<String> comboPlayer2;
    private javax.swing.JComboBox<String> comboPreviousMatches;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblCurrentRank;
    private javax.swing.JLabel lblHeading;
    private javax.swing.JLabel lblHeading1;
    private javax.swing.JLabel lblHeading2;
    private javax.swing.JLabel lblHeading3;
    private javax.swing.JLabel lblHeading5;
    private javax.swing.JLabel lblHello;
    private javax.swing.JLabel lblMatchAssissts;
    private javax.swing.JLabel lblMatchCompareKDA;
    private javax.swing.JLabel lblMatchDate;
    private javax.swing.JLabel lblMatchDeaths;
    private javax.swing.JLabel lblMatchKills;
    private javax.swing.JLabel lblNextMatch;
    private javax.swing.JLabel lblPlayer1AverageAssists;
    private javax.swing.JLabel lblPlayer1AverageDeaths;
    private javax.swing.JLabel lblPlayer1AverageKills;
    private javax.swing.JLabel lblPlayer1TotalAssists;
    private javax.swing.JLabel lblPlayer1TotalDeaths;
    private javax.swing.JLabel lblPlayer1TotalKills;
    private javax.swing.JLabel lblPlayer2AverageAssists;
    private javax.swing.JLabel lblPlayer2AverageDeaths;
    private javax.swing.JLabel lblPlayer2AverageKills;
    private javax.swing.JLabel lblPlayer2TotalAssists;
    private javax.swing.JLabel lblPlayer2TotalDeaths;
    private javax.swing.JLabel lblPlayer2TotalKills;
    private javax.swing.JLabel lblPreviousMatchesAssissts;
    private javax.swing.JLabel lblPreviousMatchesDate;
    private javax.swing.JLabel lblPreviousMatchesDeaths;
    private javax.swing.JLabel lblPreviousMatchesKDACompare;
    private javax.swing.JLabel lblPreviousMatchesKills;
    private javax.swing.JLabel lblPreviousMatchesWinOrLoss;
    private javax.swing.JLabel lblUsername2;
    private javax.swing.JLabel lblUsername23;
    private javax.swing.JLabel lblUsername24;
    private javax.swing.JLabel lblUsername25;
    private javax.swing.JLabel lblUsername26;
    private javax.swing.JLabel lblUsername27;
    private javax.swing.JLabel lblUsername28;
    private javax.swing.JLabel lblUsername29;
    private javax.swing.JLabel lblUsername30;
    private javax.swing.JLabel lblUsername31;
    private javax.swing.JLabel lblUsername32;
    private javax.swing.JLabel lblUsername35;
    private javax.swing.JLabel lblUsername49;
    private javax.swing.JLabel lblWinLoss;
    private javax.swing.JPanel mainMenuPanel;
    private javax.swing.JPanel playerStatisticsPanel;
    private javax.swing.JPanel previousMatchesPanel;
    private javax.swing.JRadioButton rbtnDraw;
    private javax.swing.JRadioButton rbtnLoss;
    private javax.swing.JRadioButton rbtnWin;
    private javax.swing.JTable tblUpcomingMatches;
    private javax.swing.JTable tblUploadMatch;
    private javax.swing.JTextArea txareaPlayer1Tip;
    private javax.swing.JTextArea txareaPlayer2Tip;
    private javax.swing.JTextField txfDay;
    private javax.swing.JTextField txfMnth;
    private javax.swing.JTextField txfOpponent;
    private javax.swing.JTextField txfYear;
    private javax.swing.JPanel upcomingMatchesPanel;
    private javax.swing.JPanel uploadMatchPanel;
    // End of variables declaration//GEN-END:variables
}
